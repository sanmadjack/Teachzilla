@page "/students"
@rendermode InteractiveServer
@inject DatabaseContext dbContext
@using Microsoft.AspNetCore.Components.QuickGrid



<PageTitle>Students</PageTitle>


<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <a href="student/" style="float:right;">Add New</a>
                    <h2>Students</h2>
@*                     <EditForm Model="formEntity" OnSubmit="AddEntity" Enhance>
                        <div class="hstack gap-2">
                            <label class="label-control">Name</label>
                            <InputText @bind-Value="formEntity.Name" class="form-control"></InputText>
                        </div>
                        <div class="hstack gap-2">
                            <label class="label-control">Phone</label>
                            <InputText @bind-Value="formEntity.Phone" class="form-control"></InputText>
                        </div>
                        <div class="hstack gap-2">
                            <label class="label-control">Address</label>
                            <InputText @bind-Value="formEntity.Address" class="form-control"></InputText>
                        </div>
                        <div class="hstack gap-2">
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm> *@
                </div>
                <div class="card-body">
                    <QuickGrid Items="@students" Pagination="pagination">
                        <TemplateColumn Title="Name" SortBy="@sortByName" IsDefaultSortColumn="true" >
                            <a href="student/@context.ID">@context.Name</a>
                        </TemplateColumn>
                        <PropertyColumn Property="@(c => c.Phone)" Sortable="true" Class="country-name" />
                        <PropertyColumn Property="@(c => c.Address)" Sortable="true" Class="country-name" />
                        <TemplateColumn Title="Action">
                            <button @onclick="@(() => Delete(context))" class="btn btn-danger">Delete</button>
                        </TemplateColumn>
                    </QuickGrid>
                </div>
                <div class="card-footer"><Paginator State="@pagination" /></div>
            </div>
        </div>
    </div>
</div>


@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 3 };

    private IQueryable<Teachzilla.Model.Student>? students;
    [SupplyParameterFromForm]
    Teachzilla.Model.Student formEntity { get; set; } = new();
    GridSort<Teachzilla.Model.Student> sortByName = GridSort<Teachzilla.Model.Student>
    .ByAscending(p => p.Name);

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        RefreshData();
    }
    private void RefreshData()
    {
        students = dbContext.Students;
        StateHasChanged();
    }


    void Delete(Teachzilla.Model.Student incomingModel)
    {
        var entity = dbContext.Students.FirstOrDefault(_ => _.ID == incomingModel.ID);
        if (entity != null)
        {
            dbContext.Students.Remove(entity);
            dbContext.SaveChanges();
        }
        RefreshData();
    }

}
