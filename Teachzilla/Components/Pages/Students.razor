@page "/students"
@rendermode InteractiveServer
@inject DatabaseContext dbContext
@using Microsoft.AspNetCore.Components.QuickGrid



<PageTitle>Students</PageTitle>

<h1>Students</h1>


<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <EditForm Model="formEntity" OnSubmit="AddEntity" Enhance>
                        <div class="hstack gap-2">
                            <label class="label-control">Name</label>
                            <InputText @bind-Value="formEntity.Name" class="form-control"></InputText>
                        </div>
                        <div class="hstack gap-2">
                            <label class="label-control">Phone</label>
                            <InputText @bind-Value="formEntity.Phone" class="form-control"></InputText>
                        </div>
                        <div class="hstack gap-2">
                            <label class="label-control">Address</label>
                            <InputText @bind-Value="formEntity.Address" class="form-control"></InputText>
                        </div>
                        <div class="hstack gap-2">
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-body">
                    <QuickGrid Items="@students" Pagination="pagination">
                        <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="country-name" InitialSortDirection="SortDirection.Ascending" />
                        <TemplateColumn Title="Name">
                            <a href="student/@context.ID">Open</a>
                        </TemplateColumn>
                        <PropertyColumn Property="@(c => c.Phone)" Sortable="true" Class="country-name" />
                        <PropertyColumn Property="@(c => c.Address)" Sortable="true" Class="country-name" />
                        <TemplateColumn Title="Action">
                            <button @onclick="@(() => Edit(context))" class="btn btn-info">Edit</button>
                            <button @onclick="@(() => Delete(context))" class="btn btn-danger">Delete</button>
                        </TemplateColumn>
                    </QuickGrid>
                </div>
                <div class="card-footer"><Paginator State="@pagination" /></div>
            </div>
        </div>
    </div>
</div>


@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 3 };

    private IQueryable<Teachzilla.Model.Student>? students;
    [SupplyParameterFromForm]
    Teachzilla.Model.Student formEntity { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        RefreshData();
    }
    private void RefreshData()
    {
        students = dbContext.Students;
        StateHasChanged();
    }
    async Task AddEntity()
    {
        // Update
        if (formEntity.ID!=Guid.Empty)
        {
            var p = dbContext.Students.FirstOrDefault(_ => _.ID == formEntity.ID);
            if (p is null) return;

            // Update entity
            dbContext.SaveChanges();
            formEntity = new();
            RefreshData();
            return;
        }

        //Add

        if (formEntity.Name is null) return;
        formEntity.ID = Guid.NewGuid();

        dbContext.Students.Add(formEntity);
        dbContext.SaveChanges();
        formEntity = new();
        RefreshData();
        return;
    }
    void Edit(Teachzilla.Model.Student incomingModel)
    {
        formEntity = incomingModel;
    }

    void Delete(Teachzilla.Model.Student incomingModel)
    {
        var entity = dbContext.Students.FirstOrDefault(_ => _.ID == incomingModel.ID);
        if (entity != null)
        {
            dbContext.Students.Remove(entity);
            dbContext.SaveChanges();
        }
        RefreshData();
    }

}
