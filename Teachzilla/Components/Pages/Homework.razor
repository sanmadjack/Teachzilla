@page "/homework/{id:Guid?}"
@rendermode InteractiveServer
@inject DatabaseContext dbContext
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>Homework</PageTitle>


<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <EditForm Model="homework" OnSubmit="SaveHomework" Enhance>
                    <div class="card-header">
                    <h2>Homework</h2>
                </div>
                <div class="card-body">
                        <div class="hstack gap-2">
                            <label class="label-control">Description</label>
                            <InputText @bind-Value="homework.Description" class="form-control"></InputText>
                        </div>
                        <div class="hstack gap-2">
                            <label class="label-control">Due Date</label>
                            <InputDate @bind-Value="homework.Due" class="form-control"></InputDate>
                        </div>
                        <div class="hstack gap-2">
                            <label class="label-control">Student</label>
                            <InputSelect @bind-Value="homework.StudentID" class="form-control">
                                @foreach(var student in dbContext.Students.OrderBy(e=>e.Name))
                                {
                                    <option value="@student.ID">@student.Name</option>
                                }

                            </InputSelect>
                        </div>                        
                </div>
                <div class="card-footer"><button type="submit" class="btn btn-primary">Save</button></div>
                    </EditForm>
            </div>
        </div>
    </div>
</div>

@if (!homework.IsNew)
{
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        New Note
                    </div>
                    <EditForm Model="noteEntity" OnSubmit="AddNote" Enhance>
                        <div class="card-body">
                            <div class="hstack gap-2">
                                <InputTextArea @bind-Value="noteEntity.Text" class="form-control"></InputTextArea>
                            </div>
                        </div>
                        <div class="card-footer"><button type="submit" class="btn btn-primary">Save</button></div>
                    </EditForm>
                </div>
            </div>
        </div>
        <br />
        @foreach (var note in homework.Notes.OrderByDescending(e => e.Created))
        {
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            @note.GenerateHeader(skipStudent: true)
                        </div>
                        <div class="card-body">
                            <pre>@note.Text</pre>
                        </div>
                        <div class="card-footer">@note.GenerateFooter()</div>
                    </div>
                </div>
            </div>
            <br/>
        }
    </div>
}

@code {
    [Parameter]
    public string id { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string studentId { get; set; }
    Teachzilla.Model.Homework homework;

    [SupplyParameterFromForm]
    Teachzilla.Model.Note noteEntity { get; set; } = new();

    private async Task RefreshData()
    {
         if(String.IsNullOrWhiteSpace(id))
        {
            homework = new();
            if(!String.IsNullOrWhiteSpace(studentId))
            {
                homework.StudentID = Guid.Parse(studentId);
            }
        } else
        {
            homework = await dbContext.Homework
                .Include(_ => _.Notes)
                .FirstAsync(_ => _.ID == Guid.Parse(id));
        }
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await RefreshData();

    }

    async Task AddNote()
    {
        var homework = await dbContext.Homework.FirstAsync(e => e.ID == this.homework.ID);
        // Update
        if (!noteEntity.IsNew)
        {
            // Update entity
            noteEntity.Updated = DateTimeOffset.Now;
            await dbContext.SaveChangesAsync();
            await RefreshData();
            return;
        }

        //Add

        if (String.IsNullOrWhiteSpace(noteEntity.Text)) return;
        noteEntity.SetGuid();
        noteEntity.Created = DateTimeOffset.Now;
        noteEntity.Updated = DateTimeOffset.Now;
        noteEntity.Homework = homework;
        noteEntity.Student = homework.Student;
        await dbContext.Notes.AddAsync(noteEntity);
        await dbContext.SaveChangesAsync();
        noteEntity= new();

        await RefreshData();
        return;
    }


    async Task SaveHomework()
    {
        // Update
        if (!homework.IsNew)
        {
            var p = await dbContext.Homework.FirstOrDefaultAsync(_ => _.ID == homework.ID);
            if (p is null) return;

            // Update entity
            homework.Updated = DateTimeOffset.Now;
            await dbContext.SaveChangesAsync();
            await RefreshData();
            return;
        }

        //Add
        if (String.IsNullOrWhiteSpace(homework.Description)) return;
        homework.SetGuid();
        homework.Created = DateTimeOffset.Now;
        homework.Updated = DateTimeOffset.Now;
        await dbContext.Homework.AddAsync(homework);
        await dbContext.SaveChangesAsync();
        id = homework.ID.ToString();
        await RefreshData();
        return;
    }
}
